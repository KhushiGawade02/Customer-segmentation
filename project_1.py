# -*- coding: utf-8 -*-
"""Project 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K3QTi-CSGBfempcbl13JDNzGC_SvfPsI

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data Collection and Analysis"""

from google.colab import drive
drive.mount('/content/drive')

# Loading the data from the csv file to a panda DataFile
customer_data=pd.read_csv('/content/drive/MyDrive/Mall_Customer.csv')

# first 5 rows in the dataframe
customer_data.head()

# finding the number of rows and columns
customer_data.shape

# getting some information about the dataset
customer_data.info()

# checking for missing values
customer_data.isnull().sum()

"""Choosing the annual income column and Spending score column"""

x = customer_data.iloc[:,[3,4]].values

print(x)

"""Choosing number of clusters

WCSS -> Within Clusters Sum of Squares
"""

# Finding WCSS value for different number of cluster

wcss = []

for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++',random_state=42)
  kmeans.fit(x)

  wcss.append(kmeans.inertia_)

# plot an elbow graph

sns.set()
plt.plot(range(1,11),wcss)
plt.title('The Elbow point Graph')
plt.xlabel('Number of clusters')
plt.ylabel('wcss')
plt.show()

"""Optimum Number of clusters = 3

Training the K-Means Clustering Method
"""

kmeans = KMeans(n_clusters=3,init='k-means++',random_state=0)

#return a label for each data point based on their cluster
Y = kmeans.fit_predict(x)

print(Y)

"""Visuallizing all the clusters"""

# plotting all the cluters and their centroids

plt.figure(figsize=(6,6))
plt.scatter(x[Y==0,0], x[Y==0,1], s=30, c='yellow', label='Cluster 1')
plt.scatter(x[Y==1,0], x[Y==1,1], s=30, c='red', label='Cluster 2')
plt.scatter(x[Y==2,0], x[Y==2,1], s=30, c='blue', label='Cluster 3')

# plot the Centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],s=60, c='black', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()